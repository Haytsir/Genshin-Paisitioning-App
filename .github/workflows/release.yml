name: "Release"

permissions:
  contents: "write"

on:
  push:
    branches:
      - master

# Action 실행
jobs:
  # Release 생성
  build:
    if: github.ref == 'refs/heads/master'
    # Action 실행 환경: windows-latest
    runs-on: windows-latest
    # Action 실행 작업들
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      # 2. Install Rust
      - name: Install Rust
        run: rustup toolchain install stable --profile minimal
      # 3. Set up cargo cache
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        continue-on-error: false
      # 4. Build Rust Proeject as Release
      - name: Build project
        run: cargo build --release --locked
      # 5. Compress Builded File
      - name: compress
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: "zip"
          filename: "genshin_paisitioning_app.zip"
          path: "./target/release/genshin_paisitioning_app.exe"

      - name: Upload parsed result file
        uses: actions/upload-artifact@v4
        with:
          name: build-result
          path: ./genshin_paisitioning_app.zip
  # Release에 Asset 업로드
  upload_release_asset:
    # Action 실행 환경: windows-latest
    needs: build
    runs-on: ubuntu-latest
    # 빌드 Action 실행 후 릴리즈 배포 및 업로드 작업
    steps:
      # Action 실행전에 필요한 작업
      # 1. Checkout code
      - name: Download artifact
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: build-result
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'Cargo.toml'
          sparse-checkout-cone-mode: false
      - run: git fetch --all --tags
      - run: ls -alR ..
      # 2. Check Release Version
      - name: Check Release Version
        id: version_check
        uses: thebongy/version-check@v1
        with:
          file: Cargo.toml
          failBuild: false
          tagFormat: v${version}
      # 3. Release 생성
      - name: create release
        if: ${{ steps.version_check.outputs.versionChanged }}
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          artifacts: ${{ steps.download_artifact.outputs.download-path }}/genshin_paisitioning_app.zip
          artifactContentType: application/zip
          tag: ${{ steps.version_check.outputs.releaseVersion }}
          name: Release ${{ steps.version_check.outputs.releaseVersion }}
          draft: false
          prerelease: false
    outputs:
      versionChanged: ${{ steps.version_check.outputs.versionChanged }}
      releaseVersion: ${{ steps.version_check.outputs.releaseVersion }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
